public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;  // Check if the root is null and return an empty result list
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>();

            for (int i = 0; i < levelSize; i++) {
                TreeNode currentNode = queue.poll();
                if (currentNode != null) {  // Check if currentNode is not null before accessing its fields
                    currentLevel.add(currentNode.val);

                    if (currentNode.left != null) {
                        queue.add(currentNode.left);
                    }

                    if (currentNode.right != null) {
                        queue.add(currentNode.right);
                    }
                }
            }

            result.add(currentLevel);
        }

        return result;
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int val) { this.val = val; }
}
